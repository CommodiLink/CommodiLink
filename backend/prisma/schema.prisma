// backend/prisma/schema.prisma
// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// Your database connection (Postgres assumed)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS ---------------------------------------------------------

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  name         String?
  role         Role         @default(USER)
  companyId    Int?
  company      Company?     @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // relations
  roomMembers  RoomMember[]
  messages     Message[]
  documents    Document[]
}

model Company {
  id           Int           @id @default(autoincrement())
  name         String
  kycStatus    KycStatus     @default(PENDING)
  subscription Subscription?
  users        User[]
  dealRooms    DealRoom[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Subscription {
  id          Int        @id @default(autoincrement())
  companyId   Int        @unique
  status      SubStatus  @default(ACTIVE)
  startedAt   DateTime   @default(now())
  expiresAt   DateTime?
  company     Company    @relation(fields: [companyId], references: [id])
}

model DealRoom {
  id          Int          @id @default(autoincrement())
  title       String
  commodity   String?
  volume      String?
  status      DealStatus   @default(DRAFT)
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  documents   Document[]
  messages    Message[]
  members     RoomMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model RoomMember {
  id        Int       @id @default(autoincrement())
  userId    Int
  roomId    Int
  role      RoomRole  @default(VIEWER)

  user      User      @relation(fields: [userId], references: [id])
  room      DealRoom  @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Document {
  id        Int        @id @default(autoincrement())
  name      String
  url       String
  roomId    Int?
  room      DealRoom?  @relation(fields: [roomId], references: [id])
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
}

model Message {
  id        Int        @id @default(autoincrement())
  content   String
  roomId    Int
  userId    Int
  createdAt DateTime   @default(now())

  room      DealRoom   @relation(fields: [roomId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

// ENUMS ----------------------------------------------------------

enum Role {
  USER
  ADMIN
}

enum RoomRole {
  VIEWER
  EDITOR
  OWNER
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

enum DealStatus {
  DRAFT
  ACTIVE
  CLOSED
}
